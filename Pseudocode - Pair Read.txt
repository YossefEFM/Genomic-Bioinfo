# >>> Pair Read Assembly <<<

DEFINE FUNCTION Pair_read(pair_read):
    SET prefix, Prefixes1, Prefixes2  TO [], [], []
    SET suffix, Suffixes1, Suffixes2  TO [], [], []
	SET K,D TO pair_read[0].split()
    SET size TO int(K)
    SET Gap TO int(D)
	
    pair_read.pop(0)

    FOR line IN pair_read:
        SET p TO line.split('|')
        prefix.append(p[0])
        suffix.append(p[1])

    FOR i IN range(len(prefix)):
        Prefixes1.append(prefix[i][:size-1])
        Prefixes2.append(prefix[i][1:])
        Suffixes1.append(suffix[i][:size-1])
        Suffixes2.append(suffix[i][1:])
    
    FOR x IN range(len(Prefixes1)):
        IF (Prefixes1[x] not IN Prefixes2) or (Suffixes1[x] not IN Suffixes2):
            SET Start TO x

        IF (Prefixes2[x] not IN Prefixes1) or (Suffixes2[x] not IN Suffixes1):
            SET End TO x

    SET Result TO [[Prefixes1[Start],Suffixes1[Start]],[Prefixes2[Start],Suffixes2[Start]]]

    FOR i IN range(1,len(Prefixes1)):
        FOR index IN range(len(Prefixes1)):
            IF (Result[i][0] EQUALS Prefixes1[index]) and (Result[i][1] EQUALS Suffixes1[index]):
                Result.append([Prefixes2[index],Suffixes2[index]])

        IF (Result[i][0] EQUALS Prefixes2[End]) and (Result[i][1]== Suffixes2[End]):
            break    
	
    SET p TO Result[0][0][0]
    SET s TO Result[0][1][0]
	
    FOR i IN range(1,len(Result)-1):
        p += Result[i][0][0]
        s += Result[i][1][0]

    p += Result[len(Result)-1][0][:]
    s += Result[len(Result)-1][1][:]

    SET idx TO len(s)-(size+Gap)
    SET Genome TO p + s[idx:]

    RETURN Genome